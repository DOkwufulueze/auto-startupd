#!/bin/bash
# Purpose: Open new tabs in terminal and excute custom commands automatically on the background that remain alive even after the terminal is exited. Send command output to either nohup.out or the /dev/null black hole.
# Author: Okwufulueze Emeka Daniel
# Date: 19/03/2017


# The SHELL_COMMANDS variable below is an array of commands you want to execute on new tabs. I have written out some for example. Remember to separate the array values with spaces

# Make the processes background jobs with either nohup or the disown parenthesis notation in order to continue execution even after the terminal is exited.


# To send output to nohup.out. Ensure you precede each command with 'nohup ', and end them with ' &' for any command you need to survive terminal exit. For example: nohup npm run dev &
# SHELL_COMMANDS=('cdyanpals; nohup npm run dev &' 'cdwscore; nohup sh serverd.sh &' 'cdwscore; nohup php worker.php &' 'nohup mysql-workbench &');


# To send output to the /dev/null black hole. Ensure you place each command in parenthesis and end them with ' &>/dev/null &' for any command you need to survive terminal exit. For example: (npm run dev &>/dev/null &)
SHELL_COMMANDS=('cdyanpals; (npm run dev &>/dev/null &)' 'cdwscore; (sh serverd.sh &>/dev/null &)' 'cdwscore; (php worker.php &>/dev/null &)' '(mysql-workbench &>/dev/null &)');


# Loop through the array of commands and execute each one on a new tab
for ((i = 0; i < ${#SHELL_COMMANDS[@]}; i++)); do
  SHELL_COMMAND=${SHELL_COMMANDS[$i]};
  xdotool key ctrl+shift+t;
  sleep 1;
  xdotool type --delay 1 --clearmodifiers "${SHELL_COMMAND}";
  xdotool key Return;
done

# Now, even after you close your terminal, the commands in the SHELL_COMMANDS array will keep running.
